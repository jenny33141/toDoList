{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","state","inputText","items","changeHandler","e","setState","target","value","removeHandler","index","listItems","splice","onSubmit","event","preventDefault","console","log","this","className","class","type","onChange","Component","List","props","map","item","key","onClick","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"+JAAAA,EAAOC,QAAU,IAA0B,kC,4ICIrCC,G,uNACJC,MAAQ,CACNC,UAAW,GACXC,MAAO,I,EAGTC,cAAgB,SAAAC,GACd,EAAKC,SAAS,CAAEJ,UAAWG,EAAEE,OAAOC,S,EAGtCC,cAAgB,SAAAC,GACd,IAAIC,EAAY,EAAKV,MAAME,MAC3BQ,EAAUC,OAAOF,EAAO,GACxB,EAAKJ,SAAS,CAAEH,MAAOQ,K,EAGzBE,SAAW,SAAAC,GACTA,EAAMC,iBACN,EAAKT,SAAS,CACZJ,UAAW,GACXC,MAAM,GAAD,mBAAM,EAAKF,MAAME,OAAjB,CAAwB,EAAKF,MAAMC,e,wEAIlC,IAAD,OAEP,OADAc,QAAQC,IAAIC,KAAKjB,MAAME,OAErB,yBAAKgB,UAAU,aACb,yBAAKA,UAAU,SACb,wBAAIC,MAAM,UAAV,iBACA,yBAAKD,UAAU,UACb,0BAAMN,SAAUK,KAAKL,UACnB,2BACEM,UAAU,QACVE,KAAK,OACLC,SAAU,SAAAR,GAAK,OAAI,EAAKV,cAAcU,IACtCN,MAAOU,KAAKjB,MAAMC,YAEpB,4BAAQiB,UAAU,UAAlB,kBAGJ,yBAAKA,UAAU,QACb,kBAAC,EAAD,CAAMhB,MAAOe,KAAKjB,MAAME,MAAOM,cAAeS,KAAKT,uB,GA1C7Cc,cAiDZC,EAAO,SAAAC,GAAK,OAChB,4BACGA,EAAMtB,MAAMuB,KAAI,SAACC,EAAMjB,GAAP,OACf,wBAAIkB,IAAKlB,GACNiB,EACD,4BAAQR,UAAU,SAASU,QAAS,kBAAMJ,EAAMhB,cAAcC,KAA9D,WAQOV,ICtDK8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9B,QAAQ8B,MAAMA,EAAMC,c","file":"static/js/main.da817a6a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    inputText: \"\",\n    items: []\n  };\n\n  changeHandler = e => {\n    this.setState({ inputText: e.target.value });\n  };\n\n  removeHandler = index => {\n    let listItems = this.state.items;\n    listItems.splice(index, 1);\n    this.setState({ items: listItems });\n  };\n\n  onSubmit = event => {\n    event.preventDefault();\n    this.setState({\n      inputText: \"\",\n      items: [...this.state.items, this.state.inputText]\n    });\n  };\n\n  render() {\n    console.log(this.state.items);\n    return (\n      <div className=\"container\">\n        <div className=\"board\">\n          <h1 class=\"header\">My To Do List</h1>\n          <div className=\"button\">\n            <form onSubmit={this.onSubmit}>\n              <input\n                className=\"input\"\n                type=\"text\"\n                onChange={event => this.changeHandler(event)}\n                value={this.state.inputText}\n              ></input>\n              <button className=\"submit\">click to add</button>\n            </form>\n          </div>\n          <div className=\"list\">\n            <List items={this.state.items} removeHandler={this.removeHandler} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\nconst List = props => (\n  <ul>\n    {props.items.map((item, index) => (\n      <li key={index}>\n        {item}\n        <button className=\"delete\" onClick={() => props.removeHandler(index)}>\n          x\n        </button>\n      </li>\n    ))}\n  </ul>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}